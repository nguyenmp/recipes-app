# See .example.env.local for editing information

# Save this file as .env.local
# Enter all the below information
# Then make a copy for .env.local.docker where you replace localhost with host.docker.internal
# Use this as a template for .env.production but only on production machine

# Archive box auth
ARCHIVE_BOX_API_KEY="_________________"
ARCHIVE_BOX_HOST="_________________"
ARCHIVE_BOX_URL="_________________"

# Cloudflare auth
CLOUDFLARE_R2_ACCESS_KEY_ID="_________________"
CLOUDFLARE_R2_ENDPOINT="_________________"
CLOUDFLARE_R2_SECRET_ACCESS_KEY="_________________"
CLOUDFLARE_R2_TOKEN_VALUE="_________________"

# Localhost does not support SSL properly, it's self-signed (not used in production).  0 in local, unset in prod
NODE_TLS_REJECT_UNAUTHORIZED="_"

# For pg connection
POSTGRES_USER="_________________"
POSTGRES_DATABASE="_________________"
POSTGRES_HOST="_________________"
POSTGRES_PASSWORD="_________________"
POSTGRES_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DATABASE}?sslmode=disable"
POSTGRES_URL_NON_POOLING="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DATABASE}?sslmode=disable"

# For NextAuth, 32 char minimum https://authjs.dev/getting-started/deployment
AUTH_SECRET="_________________"

# For pg database connection https://authjs.dev/getting-started/adapters/pg
DATABASE_HOST=${POSTGRES_HOST}
DATABASE_NAME=${POSTGRES_DATABASE}
DATABASE_USER=${POSTGRES_USER}
DATABASE_PASSWORD=${POSTGRES_PASSWORD}

# For nodemailer for authjs.dev Next Auth https://authjs.dev/getting-started/authentication/email
EMAIL_USERNAME="_________________"
EMAIL_PASSWORD="_________________"
EMAIL_HOST="_________________"
EMAIL_PORT="_________________"
EMAIL_FROM="${EMAIL_USERNAME}"
